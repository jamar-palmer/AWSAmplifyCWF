{"ast":null,"code":"/**\n * Give an input string, strictly parses a boolean value.\n *\n * @param value The boolean string to parse.\n * @returns true for \"true\", false for \"false\", otherwise an error is thrown.\n */\nexport var parseBoolean = function parseBoolean(value) {\n  switch (value) {\n    case \"true\":\n      return true;\n\n    case \"false\":\n      return false;\n\n    default:\n      throw new Error(\"Unable to parse boolean value \\\"\" + value + \"\\\"\");\n  }\n};\n/*\n * Asserts a value is a boolean and returns it.\n *\n * @param value A value that is expected to be a boolean.\n * @returns The value if it's a boolean, undefined if it's null/undefined,\n *   otherwise an error is thrown.\n */\n\nexport var expectBoolean = function expectBoolean(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"boolean\") {\n    return value;\n  }\n\n  throw new TypeError(\"Expected boolean, got \" + typeof value);\n};\n/**\n * Asserts a value is a number and returns it.\n *\n * @param value A value that is expected to be a number.\n * @returns The value if it's a number, undefined if it's null/undefined,\n *   otherwise an error is thrown.\n */\n\nexport var expectNumber = function expectNumber(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"number\") {\n    return value;\n  }\n\n  throw new TypeError(\"Expected number, got \" + typeof value);\n};\n/**\n * Asserts a value is a string and returns it.\n *\n * @param value A value that is expected to be a string.\n * @returns The value if it's a string, undefined if it's null/undefined,\n *   otherwise an error is thrown.\n */\n\nexport var expectString = function expectString(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"string\") {\n    return value;\n  }\n\n  throw new TypeError(\"Expected string, got \" + typeof value);\n};\n/**\n * Asserts a value is a number and returns it, and also converts string\n * representations of non-numeric floats into Numbers.\n *\n * @param value A number or string representation of a non-numeric float.\n * @returns The value as a number, undefined if it's null/undefined,\n *     otherwise an error is thrown.\n */\n\nexport var handleFloat = function handleFloat(value) {\n  if (typeof value == \"string\") {\n    switch (value) {\n      case \"NaN\":\n        return NaN;\n\n      case \"Infinity\":\n        return Infinity;\n\n      case \"-Infinity\":\n        return -Infinity;\n\n      default:\n        throw new Error(\"Unable to parse float value: \" + value);\n    }\n  }\n\n  return expectNumber(value);\n};","map":null,"metadata":{},"sourceType":"module"}