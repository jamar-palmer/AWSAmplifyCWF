{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CalculateRouteRequest, CalculateRouteResponse } from \"../models/models_0\";\nimport { deserializeAws_restJson1CalculateRouteCommand, serializeAws_restJson1CalculateRouteCommand } from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>\n *             <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/calculate-route.html\">Calculates a route</a> given the following required parameters:\n *                 <code>DeparturePostiton</code> and <code>DestinationPosition</code>. Requires that\n *             you first <a href=\"https://docs.aws.amazon.com/location-routes/latest/APIReference/API_CreateRouteCalculator.html\">create\n *                 aroute calculator resource</a>\n *          </p>\n *         <p>By default, a request that doesn't specify a departure time uses the best time of day\n *             to travel with the best traffic conditions when calculating the route.</p>\n *         <p>Additional options include:</p>\n *         <ul>\n *             <li>\n *                 <p>\n *                   <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/calculate-route.html#departure-time\">Specifying a departure time</a> using either <code>DepartureTime</code> or\n *                         <code>DepartureNow</code>. This calculates a route based on predictive\n *                     traffic data at the given time. </p>\n *                 <note>\n *                     <p>You can't specify both <code>DepartureTime</code> and\n *                             <code>DepartureNow</code> in a single request. Specifying both\n *                         parameters returns an error message.</p>\n *                 </note>\n *             </li>\n *             <li>\n *                 <p>\n *                   <a href=\"https://docs.aws.amazon.com/location/latest/developerguide/calculate-route.html#travel-mode\">Specifying a travel mode</a> using TravelMode. This lets you specify additional\n *                     route preference such as <code>CarModeOptions</code> if traveling by\n *                         <code>Car</code>, or <code>TruckModeOptions</code> if traveling by\n *                         <code>Truck</code>.</p>\n *             </li>\n *          </ul>\n *         <p>\n *             </p>\n * @example\n * Use a bare-bones client and the command you need to make an API call.\n * ```javascript\n * import { LocationClient, CalculateRouteCommand } from \"@aws-sdk/client-location\"; // ES Modules import\n * // const { LocationClient, CalculateRouteCommand } = require(\"@aws-sdk/client-location\"); // CommonJS import\n * const client = new LocationClient(config);\n * const command = new CalculateRouteCommand(input);\n * const response = await client.send(command);\n * ```\n *\n * @see {@link CalculateRouteCommandInput} for command's `input` shape.\n * @see {@link CalculateRouteCommandOutput} for command's `response` shape.\n * @see {@link LocationClientResolvedConfig | config} for command's `input` shape.\n *\n */\n\nvar CalculateRouteCommand =\n/** @class */\nfunction (_super) {\n  __extends(CalculateRouteCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function CalculateRouteCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  CalculateRouteCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"LocationClient\";\n    var commandName = \"CalculateRouteCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: CalculateRouteRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: CalculateRouteResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  CalculateRouteCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restJson1CalculateRouteCommand(input, context);\n  };\n\n  CalculateRouteCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restJson1CalculateRouteCommand(output, context);\n  };\n\n  return CalculateRouteCommand;\n}($Command);\n\nexport { CalculateRouteCommand };","map":null,"metadata":{},"sourceType":"module"}